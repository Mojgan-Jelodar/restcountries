
# By default, SwiftLint uses a set of sensible default rules you can adjust:
disabled_rules: # rule identifiers turned on by default to exclude from running
#  - colon
#  - comma
#  - control_statement
#  - force_cast
   - large_tuple
#  - cyclomatic_complexity
#  - shorthand_operator
#  - closure_parameter_position
#  - switch_case_alignment
#  - function_body_length
#  - trailing_newline
#  - opening_brace
#  - empty_count
#  - comma
#  - colon
#  - type_name
#  - variable_name_min_length
#  - trailing_semicolon
#  - force_try
#  - nesting
#  - variable_name
#  - conditional_binding_cascade
#  - variable_name_max_length
#  - operator_whitespace
#  - control_statement
#  - legacy_constant
#  - line_length
#  - return_arrow_whitespace
#  - trailing_whitespace
#  - closing_brace
#  - statement_position
#  - type_body_length
#  - file_length
#  - leading_whitespace
#  - legacy_constructor
#  - todo
#  - function_parameter_count
#  - operator_whitespace
  # - valid_docs
  # - missing_docs
opt_in_rules: # some rules are turned off by default, so you need to opt-in
  - empty_count # Find all the available rules by running: `swiftlint rules`

# Alternatively, specify all rules explicitly by uncommenting this option:
# only_rules: # delete `disabled_rules` & `opt_in_rules` if using this
#   - empty_parameters
#   - vertical_whitespace

included: # paths to include during linting. `--path` is ignored if present.
  #- Source
excluded: # paths to ignore during linting. Takes precedence over `included`.
  - Carthage
  - Pods
  #- Source/ExcludedFolder
  #- Source/ExcludedFile.swift
  #- Source/*/ExcludedFile.swift # Exclude files with a wildcard
analyzer_rules: # Rules run by `swiftlint analyze` (experimental)
  - explicit_self

# configurable rules can be customized from this configuration file
# binary rules can set their severity level
force_cast: warning # implicitly
force_try:
  severity: warning # explicitly
# rules that have both warning and error levels, can set just the warning level
# implicitly
line_length: 
  warning: 200
  ignores_comments: true
# they can set both implicitly with an array
#type_body_length:
#  - 300 # warning
#  - 700 # error
# or they can set both explicitly
file_length:
  warning: 500
  error: 2700
# naming rules can set warnings/errors for min_length and max_length
# additionally they can set excluded names
type_name:
  min_length: 4 # only warning
  max_length: # warning and error
    warning: 40
    error: 50
  excluded: iPhone # excluded via string
  allowed_symbols: ["_"] # these are allowed in type names

identifier_name:
  severity: warning
  min_length: 2 # only warning
  max_length: 80 # warning
  excluded: # excluded via string array
    - id
    - URL
  validates_start_with_lowercase: false
  allowed_symbols: "_"
#identifier_name:
#  min_length: # only min_length
#    error: 4 # only error
#  excluded: # excluded via string array
#    - lhs
#    - rhs
#    - pan
#    - pin
#    - txt
#    - id
#    - URL
#    - GlobalAPIKey
#    - ad
#    - bc
#    - bd
#    - res
#    - k
reporter: "xcode" # reporter type (xcode, json, csv, checkstyle, codeclimate, junit, html, emoji, sonarqube, markdown, github-actions-logging)
